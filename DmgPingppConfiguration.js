//   更新原生配置文件 脚本var fs = require('fs');var spath = require('path');var os = require('os');function insertDmgPingppCode(path){  // 	 这个是插入代码的脚本 install  if (isFile(path) == false) {    console.log("configuration DmgPingpp error!!");    return;  }  var rf = fs.readFileSync(path,"utf-8");  // 删除所有的 JPush 相关代码  注册推送的没有删除，  rf = rf.replace(/\n\#import \"Pingpp.h\"/,"");  // 插入 头文件  rf = rf.replace(/#import "AppDelegate.h"/,"\#import \"AppDelegate.h\"\n\#import \"Pingpp.h\"");  fs.writeFileSync(path, rf, "utf-8");  // 这个是删除代码的脚本 uninstall  // var rf = fs.readFileSync(path,"utf-8");  // rf = rf.replace(/#import "AppDelegate.h"[*\n]#import \"Pingpp.h\"/,"\#import \"AppDelegate.h\"");  // fs.writeFileSync(path, rf, "utf-8");  //  这个插入代码 application:openURL:sourceApplication:annotation:  var rf = fs.readFileSync(path,"utf-8");  var searchIos8 = rf.match(/\n.*annotation\:\(id\)annotation[ ]\{*/);  if (searchIos8 == null) {    console.log("没有匹配到 函数 application:openURL:sourceApplication:annotation:");    rf = rf.replace(/\@end/,"\- \(BOOL\)application\:\(UIApplication \*\)application\n" +      "            openURL\:\(NSURL \*\)url\n" +      "  sourceApplication\:\(NSString \*\)sourceApplication\n" +      "         annotation\:\(id\)annotation \{\n" +      "  BOOL canHandleURL = \[Pingpp handleOpenURL:url withCompletion:nil\]\;\n" +      "  return canHandleURL\;\n" +      "\}\n\n\@end");    // console.log(rf);    fs.writeFileSync(path, rf, "utf-8");  } else {    console.log(searchIos8[0]);    var oldValue = rf.match(/BOOL canHandleURL = \[Pingpp handleOpenURL:url withCompletion:nil/)    if(oldValue == null) {      rf = rf.replace(searchIos8[0], searchIos8[0] + "\n" +        "  BOOL canHandleURL = \[Pingpp handleOpenURL:url withCompletion:nil\]\;\n" +        "  return canHandleURL\;");      fs.writeFileSync(path, rf, "utf-8");    } else{      console.log("application:openURL:sourceApplication:annotation:，不再插入");    }  }  //  这个插入代码 application:openURL:options:  var rf = fs.readFileSync(path,"utf-8");  var searchIos9 = rf.match(/\n.*options\:\(NSDictionary \*\)options[ ]\{*/);  if (searchIos9 == null) {    console.log("没有匹配到 函数 application:openURL:options:");    rf = rf.replace(/\@end/,"\- \(BOOL\)application\:\(UIApplication \*\)application\n" +      "            openURL\:\(NSURL \*\)url\n" +      "            options\:\(NSDictionary \*\)options \{\n" +      "  BOOL canHandleURL = \[Pingpp handleOpenURL:url withCompletion:nil\]\;\n" +      "  return canHandleURL\;\n" +      "\}\n\n\@end");    // console.log(rf);    fs.writeFileSync(path, rf, "utf-8");  } else {    console.log(searchIos9[0]);    var oldValue = rf.match(/BOOL canHandleURL = \[Pingpp handleOpenURL:url withCompletion:nil/)    if(oldValue == null) {      rf = rf.replace(searchIos9[0], searchIos9[0] + "\n" +        "  BOOL canHandleURL = \[Pingpp handleOpenURL:url withCompletion:nil\]\;\n" +        "  return canHandleURL\;");      fs.writeFileSync(path, rf, "utf-8");    } else{      console.log("application:openURL:options:，不再插入");    }  }}// 判断文件function exists(path){  return fs.existsSync(path) || path.existsSync(path);}function isFile(path){  return exists(path) && fs.statSync(path).isFile();}function isDir(path){  return exists(path) && fs.statSync(path).isDirectory();}//  深度遍历所有文件，getAllfiles("./ios",function (f, s) {  var isAppdelegate = f.match(/AppDelegate\.m/);  // 找到Appdelegate.m 文件 插入代码  if (isAppdelegate != null) {    console.log("the file is appdelegate:"+f);    insertDmgPingppCode(f);  }});// getGradleFile("./node_modules/jpush-react-native", function (f, s) {//   var isBuildGradle = f.match(/build\.gradle/);//   if (isBuildGradle != null) {//     console.log("find gradle file in jpush plugin " + f);//     configureAppkey(f);//   }// });// getConfigureFiles("./android", function (f, s) {//   //找到settings.gradle//   var isSettingGradle = f.match(/settings\.gradle/);//   if (isSettingGradle != null) {//     console.log("find settings.gradle in android project " + f);//     configureSetting(f);//   }////   //找到project下的build.gradle//   var isProjectGradle = f.match(/.*\/build\.gradle/);//   if (isProjectGradle != null) {//     console.log("find build.gradle in android project " + f);//     configureGradle(f);//   }// });// function to get all filefunction getAllfiles(dir, findOne) {  // if (arguments.length < 2) throw new TypeError('Bad arguments number');  if (typeof findOne !== 'function') {    throw new TypeError('The argument "findOne" must be a function');  }  eachFileSync(spath.resolve(dir), findOne);}function eachFileSync (dir, findOne) {  var stats = fs.statSync(dir);  findOne(dir, stats);  // 遍历子目录  if (stats.isDirectory()) {    var files = fullPath(dir, fs.readdirSync(dir));    // console.log(dir);    files.forEach(function (f) {      eachFileSync(f, findOne);    });  }}function fullPath (dir, files) {  return files.map(function (f) {    return spath.join(dir, f);  });}// androidfunction getGradleFile(dir, findOne) {  if (typeof findOne !== 'function') {    throw new TypeError('The argument "findOne" must be a function');  }  eachFileSync(spath.resolve(dir), findOne);}function getConfigureFiles(dir, findOne) {  if (typeof findOne !== 'function') {    throw new TypeError('The argument "findOne" must be a function');  }  eachFileSync(spath.resolve(dir), findOne);}// function configureAppkey(path) {//   if (isFile(path) == false) {//     console.log("configuration JPush error!!");//     return;//   }////   var rf = fs.readFileSync(path, "utf-8");//   var searchAppkey = rf.match(/\n.*JPUSH_APPKEY\: \"yourAppKey\"/);//   if (searchAppkey != null) {//     rf = rf.replace(/yourAppKey/, appKey);//     fs.writeFileSync(path, rf, "utf-8");//   } else {//     console.log("Did not find JPUSH_APPKEY in path: " + path);//   }// }function configureSetting(path) {  if (isFile(path) == false) {    console.log("configuration JPush error!!");    return;  }  var rf = fs.readFileSync(path, "utf-8");  var isAlreadyWrite = rf.match(/.*jpush-react-native.*/);  if (isAlreadyWrite == null) {    var searchKey = rf.match(/\n.*include.*/);    if (searchKey != null) {      rf = rf.replace(searchKey[0], searchKey[0] + "\, \'\:jpush-react-native\'\nproject\(\'\:jpush-react-native\'\)\.projectDir = new File\(rootProject\.projectDir\, \'\.\.\/node_modules\/jpush-react-native\/android\'\)\n" );      fs.writeFileSync(path, rf, "utf-8");    } else {      console.log("Did not find include in settings.gradle: " + path);    }  }}function configureGradle(path) {  if (isFile(path) == false) {    console.log("configuration JPush error!!");    return;  }  var rf = fs.readFileSync(path, "utf-8");  var isAlreadyWrite = rf.match(/.*jpush-react-native.*/);  if (isAlreadyWrite == null) {    var searchKey = rf.match(/\n.*compile fileTree.*\n/);    if (searchKey != null) {      rf = rf.replace(searchKey[0], searchKey[0] + "    compile project\(\'\:jpush-react-native\'\)\n");      fs.writeFileSync(path, rf, "utf-8");    } else {      console.log("Did not find \"compile\" in path: " + path);    }  }}